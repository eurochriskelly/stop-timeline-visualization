const fs = require('fs');
const path = require('path');

const POSIX_SCENARIOS_DIR = 'sample-data/scenarios';
const scenariosDir = path.resolve(POSIX_SCENARIOS_DIR);

function listDirEntries(dirPath, prefix = '') {
  return fs
    .readdirSync(dirPath)
    .filter((item) => item.startsWith(prefix))
    .sort((a, b) => a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' }));
}

function getScenarios() {
  const scenarios = [];
  const items = listDirEntries(scenariosDir, 'scen-');
  for (const scenId of items) {
    const scenPath = path.join(scenariosDir, scenId);
    if (!fs.statSync(scenPath).isDirectory()) continue;
    const label = `Scenario ${scenId.split('-')[1]}`;
    const states = [];
    const stateItems = listDirEntries(scenPath, 'state-');
    for (const stateId of stateItems) {
      const statePath = path.join(scenPath, stateId);
      if (!fs.statSync(statePath).isDirectory()) continue;
      const stateLabel = `State ${stateId.split('-')[1]}`;
      const files = [];

      function collectFiles(dirFsPath, relativePosix) {
        const dirEntries = fs
          .readdirSync(dirFsPath)
          .sort((a, b) => a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' }));

        for (const entry of dirEntries) {
          const fullPath = path.join(dirFsPath, entry);
          const nextRelative = relativePosix
            ? path.posix.join(relativePosix, entry)
            : entry;
          if (fs.statSync(fullPath).isDirectory()) {
            collectFiles(fullPath, nextRelative);
          } else if (entry.toLowerCase().endsWith('.xml')) {
            files.push(nextRelative);
          }
        }
      }

      collectFiles(statePath, stateId);
      states.push({ id: stateId, label: stateLabel, files });
    }
    scenarios.push({ id: scenId, label, states });
  }
  return { basePath: POSIX_SCENARIOS_DIR, scenarios };
}

function buildManifests() {
  const scenarios = [];
  const inlineFiles = {};
  const items = listDirEntries(scenariosDir, 'scen-');

  for (const scenId of items) {
    const scenPath = path.join(scenariosDir, scenId);
    if (!fs.statSync(scenPath).isDirectory()) continue;

    const label = `Scenario ${scenId.split('-')[1]}`;
    const states = [];
    const inlineStateFiles = {};

    const stateItems = listDirEntries(scenPath, 'state-');
    for (const stateId of stateItems) {
      const statePath = path.join(scenPath, stateId);
      if (!fs.statSync(statePath).isDirectory()) continue;

      const stateLabel = `State ${stateId.split('-')[1]}`;
      const files = [];
      const inlineEntries = {};

      function collectFiles(dirFsPath, relativePosix) {
        const dirEntries = fs
          .readdirSync(dirFsPath)
          .sort((a, b) => a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' }));

        for (const entry of dirEntries) {
          const fullPath = path.join(dirFsPath, entry);
          const nextRelative = relativePosix
            ? path.posix.join(relativePosix, entry)
            : entry;

          if (fs.statSync(fullPath).isDirectory()) {
            collectFiles(fullPath, nextRelative);
          } else if (entry.toLowerCase().endsWith('.xml')) {
            files.push(nextRelative);
            const fileContent = fs.readFileSync(fullPath, 'utf8');
            inlineEntries[nextRelative] = Buffer.from(fileContent, 'utf8').toString('base64');
          }
        }
      }

      collectFiles(statePath, stateId);

      states.push({ id: stateId, label: stateLabel, files });
      inlineStateFiles[stateId] = inlineEntries;
    }

    scenarios.push({ id: scenId, label, states });
    inlineFiles[scenId] = inlineStateFiles;
  }

  const manifest = { basePath: POSIX_SCENARIOS_DIR, scenarios };
  return { manifest, inlineFiles };
}

const { manifest, inlineFiles } = buildManifests();
const jsonOutput = JSON.stringify(manifest, null, 2);
const inlineJson = JSON.stringify(inlineFiles);

fs.writeFileSync(path.join(scenariosDir, 'index.json'), `${jsonOutput}\n`);
fs.writeFileSync(
  path.join(scenariosDir, 'index.js'),
  `// Auto-generated by make build-index\nconst manifest = ${jsonOutput};\nconst inlineFiles = ${inlineJson};\nexport { inlineFiles };\nexport default manifest;\n`,
);
console.log('index manifest rebuilt');
